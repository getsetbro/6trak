var common = require("./sound-common");
var timer = require("timer");
var Sound = (function(_super) {
    __extends(Sound, _super);

    function Sound() {
        _super.apply(this, arguments);
        this._url = NSURL.fileURLWithPath(this._path);
        this._player = new AVAudioPlayer();
        this._player.initWithContentsOfURLError(this._url);
        this._player.prepareToPlay();
    }
    Sound.prototype.getTimeLeft = function() {return this._player.duration - this._player.currentTime;};
    Sound.prototype.getTime = function() {return this._player.currentTime;};
    Sound.prototype.getDur = function() {return this._player.duration;};
    Sound.prototype.getVol = function() {return this._player.volume;};

    Sound.prototype.play = function() {
        this._player.play();
        this._player.volume = 1.0;
    };
    Sound.prototype.stop = function() {
        this._player.stop();
        this._player.prepareToPlay();
        this._player.currentTime = 0;
        this._player.volume = 1.0;
    };

    Sound.prototype.skipTo = function(time) {
        this._player.currentTime = time;
    };

    Sound.prototype.fastout = function() {
        var that = this;
        this.run = function () {
            if (that._player.volume >= 0.001){
                that._player.volume = that._player.volume - 0.002;
                timer.setTimeout(that.run, 10);
            }else{
                that.stop();
            }
        }
        this.run();
    };

    Sound.prototype.fadeout = function() {
        var that = this;
        this.run = function () {
            if (that._player.volume >= 0.001){
                that._player.volume = that._player.volume - 0.001;
                timer.setTimeout(that.run, 10);
            }else{
                that.stop();
            }
        }
        this.run();
    };
    Sound.prototype.fadeinAt = function(start) {
        var that = this;
        this._player.play();
        this._player.currentTime = start;
        this._player.volume = 0.0;
        this.run = function () {
            if (that._player.volume < 1.0){
                that._player.volume = that._player.volume + 0.001;
                timer.setTimeout(that.run, 10);
            }
        }
        this.run();
    };
    // Sound.prototype.vol = function(amount) {
    //     this._player.volume = amount;
    // };
    return Sound;
})(common.Sound);
exports.Sound = Sound;
exports.create = function(path) {
    return new Sound(path);
};
